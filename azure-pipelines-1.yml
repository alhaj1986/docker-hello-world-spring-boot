trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
- group: javapoc  # Link to the 'javapoc' Variable Group

steps:
- checkout: self
  displayName: 'Checkout source code'

- task: SonarQubePrepare@7
  inputs:
    SonarQube: 'awssonarserver'
    scannerMode: 'other'

- task: Maven@3
  displayName: 'Build with Maven'
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'Path'
    jdkUserInputPath: '/usr/lib/jvm/java-17-amazon-corretto.aarch64'
    jdkArchitectureOption: 'x64'
    goals: 'clean install sonar:sonar'

- task: Maven@3
  displayName: 'Run Tests and Generate Code Coverage Report'
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'Path'
    jdkUserInputPath: '/usr/lib/jvm/java-17-amazon-corretto.aarch64'
    jdkArchitectureOption: 'x64'
    goals: 'test'
    options: '-Pcoverage'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage Results'
  inputs:
    codeCoverageTool: 'JaCoCo'
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/target/site/jacoco/jacoco.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/**/target/site/jacoco'

- task: Docker@2
  displayName: 'Build Docker image'
  inputs:
    repository: 'azurejavaimage'
    command: 'build'
    Dockerfile: '**/Dockerfile'
    tags: |
      latest
      $(Build.BuildId)

- script: |
    previous_build_id=$(docker images --format "{{.Tag}}" azurejavaimage | grep -v latest | sort -r | head -n 1)
    if [ -n "$previous_build_id" ]; then
      docker rmi azurejavaimage:$previous_build_id
    fi
  displayName: 'Remove previous Docker image'

- script: |
    docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image azurejavaimage:latest
  displayName: 'Scan Docker image with Trivy'

- script: |
    aws configure set aws_access_key_id $(aws_access_key_id)
    aws configure set aws_secret_access_key $(aws_secret_access_key)
    aws configure set aws_session_token $(aws_session_token)
    aws configure set default.region $(aws_region)
  displayName: 'Configure AWS CLI'
  env:
    aws_access_key_id: $(aws_access_key_id)
    aws_secret_access_key: $(aws_secret_access_key)
    aws_session_token: $(aws_session_token)
    aws_region: $(aws_region)

- script: |
    aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 920373030046.dkr.ecr.us-east-1.amazonaws.com
  displayName: 'Login to AWS ECR'
  env:
    AWS_ACCESS_KEY_ID: $(aws_access_key_id)
    AWS_SECRET_ACCESS_KEY: $(aws_secret_access_key)
    AWS_SESSION_TOKEN: $(aws_session_token)

- script: |
    docker tag azurejavaimage:latest 920373030046.dkr.ecr.us-east-1.amazonaws.com/azurejavaimage:latest
  displayName: 'Tag Docker image'

- script: |
    docker push 920373030046.dkr.ecr.us-east-1.amazonaws.com/azurejavaimage:latest
  displayName: 'Push Docker image to AWS ECR'
